# -*- coding: utf-8 -*-
"""Movie_genre_Classification

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ghHgLdMo8lIxnwS6kreU9nIKAGGW5WYr
"""

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report

# Load the datasets
train_df = pd.read_csv('train_data.txt', delimiter=':::', names=['index', 'movie_name', 'genre', 'plot'])
test_df = pd.read_csv('test_data.txt', delimiter=':::', names=['index', 'movie_name', 'plot'])
test_solution_df = pd.read_csv('test_data_solution.txt', delimiter=':::', names=['index', 'movie_name', 'genre', 'plot'])

# Combine train and test solution data for training
combined_df = pd.concat([train_df, test_solution_df])

# Preprocess the data
X = combined_df['plot']
y = combined_df['genre']

# Feature extraction using TF-IDF
tfidf = TfidfVectorizer(max_features=5000, stop_words='english')
X = tfidf.fit_transform(X)

# Split the data
X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the models
models = {
    'Naive Bayes': MultinomialNB(),
    'Logistic Regression': LogisticRegression(max_iter=1000),
    'SVM': SVC(kernel='linear')
}

for name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_val)
    print(f"{name}:\n")
    print("Accuracy:", accuracy_score(y_val, y_pred))
    print("Classification Report:\n", classification_report(y_val, y_pred))
    print("\n")

# Make predictions on the test set
X_test = tfidf.transform(test_df['plot'])
best_model = models['Logistic Regression']  # Choose the best model based on validation performance
y_test_pred = best_model.predict(X_test)

# Add predictions to the test dataframe
test_df['predicted_genre'] = y_test_pred

# Display the predictions
print(test_df[['movie_name', 'predicted_genre']])